(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/skinview3d/libs/model.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BodyPart": (()=>BodyPart),
    "CapeObject": (()=>CapeObject),
    "EarsObject": (()=>EarsObject),
    "ElytraObject": (()=>ElytraObject),
    "PlayerObject": (()=>PlayerObject),
    "SkinObject": (()=>SkinObject)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/build/three.module.js [app-client] (ecmascript)");
;
function setUVs(box, u, v, width, height, depth, textureWidth, textureHeight) {
    const toFaceVertices = (x1, y1, x2, y2)=>[
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Vector2"](x1 / textureWidth, 1.0 - y2 / textureHeight),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Vector2"](x2 / textureWidth, 1.0 - y2 / textureHeight),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Vector2"](x2 / textureWidth, 1.0 - y1 / textureHeight),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Vector2"](x1 / textureWidth, 1.0 - y1 / textureHeight)
        ];
    const top = toFaceVertices(u + depth, v, u + width + depth, v + depth);
    const bottom = toFaceVertices(u + width + depth, v, u + width * 2 + depth, v + depth);
    const left = toFaceVertices(u, v + depth, u + depth, v + depth + height);
    const front = toFaceVertices(u + depth, v + depth, u + width + depth, v + depth + height);
    const right = toFaceVertices(u + width + depth, v + depth, u + width + depth * 2, v + height + depth);
    const back = toFaceVertices(u + width + depth * 2, v + depth, u + width * 2 + depth * 2, v + height + depth);
    const uvAttr = box.attributes.uv;
    const uvRight = [
        right[3],
        right[2],
        right[0],
        right[1]
    ];
    const uvLeft = [
        left[3],
        left[2],
        left[0],
        left[1]
    ];
    const uvTop = [
        top[3],
        top[2],
        top[0],
        top[1]
    ];
    const uvBottom = [
        bottom[0],
        bottom[1],
        bottom[3],
        bottom[2]
    ];
    const uvFront = [
        front[3],
        front[2],
        front[0],
        front[1]
    ];
    const uvBack = [
        back[3],
        back[2],
        back[0],
        back[1]
    ];
    // Create a new array to hold the modified UV data
    const newUVData = [];
    // Iterate over the arrays and copy the data to uvData
    for (const uvArray of [
        uvRight,
        uvLeft,
        uvTop,
        uvBottom,
        uvFront,
        uvBack
    ]){
        for (const uv of uvArray){
            newUVData.push(uv.x, uv.y);
        }
    }
    uvAttr.set(new Float32Array(newUVData));
    uvAttr.needsUpdate = true;
}
function setSkinUVs(box, u, v, width, height, depth) {
    setUVs(box, u, v, width, height, depth, 64, 64);
}
function setCapeUVs(box, u, v, width, height, depth) {
    setUVs(box, u, v, width, height, depth, 64, 32);
}
class BodyPart extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"] {
    constructor(innerLayer, outerLayer){
        super();
        Object.defineProperty(this, "innerLayer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: innerLayer
        });
        Object.defineProperty(this, "outerLayer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: outerLayer
        });
        innerLayer.name = "inner";
        outerLayer.name = "outer";
    }
}
class SkinObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"] {
    constructor(){
        super();
        // body parts
        Object.defineProperty(this, "head", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rightArm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "leftArm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rightLeg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "leftLeg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "modelListeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        }); // called when model(slim property) is changed
        Object.defineProperty(this, "slim", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_map", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "layer1Material", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "layer1MaterialBiased", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "layer2Material", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "layer2MaterialBiased", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.layer1Material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MeshStandardMaterial"]({
            side: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FrontSide"]
        });
        this.layer2Material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MeshStandardMaterial"]({
            side: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DoubleSide"],
            transparent: true,
            alphaTest: 1e-5
        });
        this.layer1MaterialBiased = this.layer1Material.clone();
        this.layer1MaterialBiased.polygonOffset = true;
        this.layer1MaterialBiased.polygonOffsetFactor = 1.0;
        this.layer1MaterialBiased.polygonOffsetUnits = 1.0;
        this.layer2MaterialBiased = this.layer2Material.clone();
        this.layer2MaterialBiased.polygonOffset = true;
        this.layer2MaterialBiased.polygonOffsetFactor = 1.0;
        this.layer2MaterialBiased.polygonOffsetUnits = 1.0;
        // Head
        const headBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](8, 8, 8);
        setSkinUVs(headBox, 0, 0, 8, 8, 8);
        const headMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](headBox, this.layer1Material);
        const head2Box = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](9, 9, 9);
        setSkinUVs(head2Box, 32, 0, 8, 8, 8);
        const head2Mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](head2Box, this.layer2Material);
        this.head = new BodyPart(headMesh, head2Mesh);
        this.head.name = "head";
        this.head.add(headMesh, head2Mesh);
        headMesh.position.y = 4;
        head2Mesh.position.y = 4;
        this.add(this.head);
        // Body
        const bodyBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](8, 12, 4);
        setSkinUVs(bodyBox, 16, 16, 8, 12, 4);
        const bodyMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](bodyBox, this.layer1Material);
        const body2Box = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](8.5, 12.5, 4.5);
        setSkinUVs(body2Box, 16, 32, 8, 12, 4);
        const body2Mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](body2Box, this.layer2Material);
        this.body = new BodyPart(bodyMesh, body2Mesh);
        this.body.name = "body";
        this.body.add(bodyMesh, body2Mesh);
        this.body.position.y = -6;
        this.add(this.body);
        // Right Arm
        const rightArmBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"]();
        const rightArmMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](rightArmBox, this.layer1MaterialBiased);
        this.modelListeners.push(()=>{
            rightArmMesh.scale.x = this.slim ? 3 : 4;
            rightArmMesh.scale.y = 12;
            rightArmMesh.scale.z = 4;
            setSkinUVs(rightArmBox, 40, 16, this.slim ? 3 : 4, 12, 4);
        });
        const rightArm2Box = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"]();
        const rightArm2Mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](rightArm2Box, this.layer2MaterialBiased);
        this.modelListeners.push(()=>{
            rightArm2Mesh.scale.x = this.slim ? 3.5 : 4.5;
            rightArm2Mesh.scale.y = 12.5;
            rightArm2Mesh.scale.z = 4.5;
            setSkinUVs(rightArm2Box, 40, 32, this.slim ? 3 : 4, 12, 4);
        });
        const rightArmPivot = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        rightArmPivot.add(rightArmMesh, rightArm2Mesh);
        this.modelListeners.push(()=>{
            rightArmPivot.position.x = this.slim ? -0.5 : -1;
        });
        rightArmPivot.position.y = -4;
        this.rightArm = new BodyPart(rightArmMesh, rightArm2Mesh);
        this.rightArm.name = "rightArm";
        this.rightArm.add(rightArmPivot);
        this.rightArm.position.x = -5;
        this.rightArm.position.y = -2;
        this.add(this.rightArm);
        // Left Arm
        const leftArmBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"]();
        const leftArmMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](leftArmBox, this.layer1MaterialBiased);
        this.modelListeners.push(()=>{
            leftArmMesh.scale.x = this.slim ? 3 : 4;
            leftArmMesh.scale.y = 12;
            leftArmMesh.scale.z = 4;
            setSkinUVs(leftArmBox, 32, 48, this.slim ? 3 : 4, 12, 4);
        });
        const leftArm2Box = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"]();
        const leftArm2Mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](leftArm2Box, this.layer2MaterialBiased);
        this.modelListeners.push(()=>{
            leftArm2Mesh.scale.x = this.slim ? 3.5 : 4.5;
            leftArm2Mesh.scale.y = 12.5;
            leftArm2Mesh.scale.z = 4.5;
            setSkinUVs(leftArm2Box, 48, 48, this.slim ? 3 : 4, 12, 4);
        });
        const leftArmPivot = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        leftArmPivot.add(leftArmMesh, leftArm2Mesh);
        this.modelListeners.push(()=>{
            leftArmPivot.position.x = this.slim ? 0.5 : 1;
        });
        leftArmPivot.position.y = -4;
        this.leftArm = new BodyPart(leftArmMesh, leftArm2Mesh);
        this.leftArm.name = "leftArm";
        this.leftArm.add(leftArmPivot);
        this.leftArm.position.x = 5;
        this.leftArm.position.y = -2;
        this.add(this.leftArm);
        // Right Leg
        const rightLegBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](4, 12, 4);
        setSkinUVs(rightLegBox, 0, 16, 4, 12, 4);
        const rightLegMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](rightLegBox, this.layer1MaterialBiased);
        const rightLeg2Box = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](4.5, 12.5, 4.5);
        setSkinUVs(rightLeg2Box, 0, 32, 4, 12, 4);
        const rightLeg2Mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](rightLeg2Box, this.layer2MaterialBiased);
        const rightLegPivot = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        rightLegPivot.add(rightLegMesh, rightLeg2Mesh);
        rightLegPivot.position.y = -6;
        this.rightLeg = new BodyPart(rightLegMesh, rightLeg2Mesh);
        this.rightLeg.name = "rightLeg";
        this.rightLeg.add(rightLegPivot);
        this.rightLeg.position.x = -1.9;
        this.rightLeg.position.y = -12;
        this.rightLeg.position.z = -0.1;
        this.add(this.rightLeg);
        // Left Leg
        const leftLegBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](4, 12, 4);
        setSkinUVs(leftLegBox, 16, 48, 4, 12, 4);
        const leftLegMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](leftLegBox, this.layer1MaterialBiased);
        const leftLeg2Box = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](4.5, 12.5, 4.5);
        setSkinUVs(leftLeg2Box, 0, 48, 4, 12, 4);
        const leftLeg2Mesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](leftLeg2Box, this.layer2MaterialBiased);
        const leftLegPivot = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        leftLegPivot.add(leftLegMesh, leftLeg2Mesh);
        leftLegPivot.position.y = -6;
        this.leftLeg = new BodyPart(leftLegMesh, leftLeg2Mesh);
        this.leftLeg.name = "leftLeg";
        this.leftLeg.add(leftLegPivot);
        this.leftLeg.position.x = 1.9;
        this.leftLeg.position.y = -12;
        this.leftLeg.position.z = -0.1;
        this.add(this.leftLeg);
        this.modelType = "default";
    }
    get map() {
        return this._map;
    }
    set map(newMap) {
        this._map = newMap;
        this.layer1Material.map = newMap;
        this.layer1Material.needsUpdate = true;
        this.layer1MaterialBiased.map = newMap;
        this.layer1MaterialBiased.needsUpdate = true;
        this.layer2Material.map = newMap;
        this.layer2Material.needsUpdate = true;
        this.layer2MaterialBiased.map = newMap;
        this.layer2MaterialBiased.needsUpdate = true;
    }
    get modelType() {
        return this.slim ? "slim" : "default";
    }
    set modelType(value) {
        this.slim = value === "slim";
        this.modelListeners.forEach((listener)=>listener());
    }
    getBodyParts() {
        return this.children.filter((it)=>it instanceof BodyPart);
    }
    setInnerLayerVisible(value) {
        this.getBodyParts().forEach((part)=>part.innerLayer.visible = value);
    }
    setOuterLayerVisible(value) {
        this.getBodyParts().forEach((part)=>part.outerLayer.visible = value);
    }
    resetJoints() {
        this.head.rotation.set(0, 0, 0);
        this.leftArm.rotation.set(0, 0, 0);
        this.rightArm.rotation.set(0, 0, 0);
        this.leftLeg.rotation.set(0, 0, 0);
        this.rightLeg.rotation.set(0, 0, 0);
        this.body.rotation.set(0, 0, 0);
        this.head.position.y = 0;
        this.body.position.y = -6;
        this.body.position.z = 0;
        this.rightArm.position.x = -5;
        this.rightArm.position.y = -2;
        this.rightArm.position.z = 0;
        this.leftArm.position.x = 5;
        this.leftArm.position.y = -2;
        this.leftArm.position.z = 0;
        this.rightLeg.position.x = -1.9;
        this.rightLeg.position.y = -12;
        this.rightLeg.position.z = -0.1;
        this.leftLeg.position.x = 1.9;
        this.leftLeg.position.y = -12;
        this.leftLeg.position.z = -0.1;
    }
}
class CapeObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"] {
    constructor(){
        super();
        Object.defineProperty(this, "cape", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "material", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MeshStandardMaterial"]({
            side: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DoubleSide"],
            transparent: true,
            alphaTest: 1e-5
        });
        // +z (front) - inside of cape
        // -z (back) - outside of cape
        const capeBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](10, 16, 1);
        setCapeUVs(capeBox, 0, 0, 10, 16, 1);
        this.cape = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](capeBox, this.material);
        this.cape.position.y = -8;
        this.cape.position.z = 0.5;
        this.add(this.cape);
    }
    get map() {
        return this.material.map;
    }
    set map(newMap) {
        this.material.map = newMap;
        this.material.needsUpdate = true;
    }
}
class ElytraObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"] {
    constructor(){
        super();
        Object.defineProperty(this, "leftWing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "rightWing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "material", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MeshStandardMaterial"]({
            side: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DoubleSide"],
            transparent: true,
            alphaTest: 1e-5
        });
        const leftWingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](12, 22, 4);
        setCapeUVs(leftWingBox, 22, 0, 10, 20, 2);
        const leftWingMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](leftWingBox, this.material);
        leftWingMesh.position.x = -5;
        leftWingMesh.position.y = -10;
        leftWingMesh.position.z = -1;
        this.leftWing = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        this.leftWing.add(leftWingMesh);
        this.add(this.leftWing);
        const rightWingBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](12, 22, 4);
        setCapeUVs(rightWingBox, 22, 0, 10, 20, 2);
        const rightWingMesh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](rightWingBox, this.material);
        rightWingMesh.scale.x = -1;
        rightWingMesh.position.x = 5;
        rightWingMesh.position.y = -10;
        rightWingMesh.position.z = -1;
        this.rightWing = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        this.rightWing.add(rightWingMesh);
        this.add(this.rightWing);
        this.leftWing.position.x = 5;
        this.leftWing.rotation.x = 0.2617994;
        this.resetJoints();
    }
    resetJoints() {
        this.leftWing.rotation.y = 0.01; // to avoid z-fighting
        this.leftWing.rotation.z = 0.2617994;
        this.updateRightWing();
    }
    /**
     * Mirrors the position & rotation of left wing,
     * and apply them to the right wing.
     */ updateRightWing() {
        this.rightWing.position.x = -this.leftWing.position.x;
        this.rightWing.position.y = this.leftWing.position.y;
        this.rightWing.rotation.x = this.leftWing.rotation.x;
        this.rightWing.rotation.y = -this.leftWing.rotation.y;
        this.rightWing.rotation.z = -this.leftWing.rotation.z;
    }
    get map() {
        return this.material.map;
    }
    set map(newMap) {
        this.material.map = newMap;
        this.material.needsUpdate = true;
    }
}
class EarsObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"] {
    constructor(){
        super();
        Object.defineProperty(this, "rightEar", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "leftEar", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "material", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MeshStandardMaterial"]({
            side: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FrontSide"]
        });
        const earBox = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BoxGeometry"](8, 8, 4 / 3);
        setUVs(earBox, 0, 0, 6, 6, 1, 14, 7);
        this.rightEar = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](earBox, this.material);
        this.rightEar.name = "rightEar";
        this.rightEar.position.x = -6;
        this.add(this.rightEar);
        this.leftEar = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Mesh"](earBox, this.material);
        this.leftEar.name = "leftEar";
        this.leftEar.position.x = 6;
        this.add(this.leftEar);
    }
    get map() {
        return this.material.map;
    }
    set map(newMap) {
        this.material.map = newMap;
        this.material.needsUpdate = true;
    }
}
const CapeDefaultAngle = 10.8 * Math.PI / 180;
class PlayerObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"] {
    constructor(){
        super();
        Object.defineProperty(this, "skin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cape", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "elytra", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ears", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.skin = new SkinObject();
        this.skin.name = "skin";
        this.skin.position.y = 8;
        this.add(this.skin);
        this.cape = new CapeObject();
        this.cape.name = "cape";
        this.cape.position.y = 8;
        this.cape.position.z = -2;
        this.cape.rotation.x = CapeDefaultAngle;
        this.cape.rotation.y = Math.PI;
        this.add(this.cape);
        this.elytra = new ElytraObject();
        this.elytra.name = "elytra";
        this.elytra.position.y = 8;
        this.elytra.position.z = -2;
        this.elytra.visible = false;
        this.add(this.elytra);
        this.ears = new EarsObject();
        this.ears.name = "ears";
        this.ears.position.y = 10;
        this.ears.position.z = 2 / 3;
        this.ears.visible = false;
        this.skin.head.add(this.ears);
    }
    get backEquipment() {
        if (this.cape.visible) {
            return "cape";
        } else if (this.elytra.visible) {
            return "elytra";
        } else {
            return null;
        }
    }
    set backEquipment(value) {
        this.cape.visible = value === "cape";
        this.elytra.visible = value === "elytra";
    }
    resetJoints() {
        this.skin.resetJoints();
        this.cape.rotation.x = CapeDefaultAngle;
        this.cape.position.y = 8;
        this.cape.position.z = -2;
        this.elytra.position.y = 8;
        this.elytra.position.z = -2;
        this.elytra.rotation.x = 0;
        this.elytra.resetJoints();
    }
} //# sourceMappingURL=model.js.map
}}),
"[project]/node_modules/skinview3d/libs/animation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CrouchAnimation": (()=>CrouchAnimation),
    "FlyingAnimation": (()=>FlyingAnimation),
    "FunctionAnimation": (()=>FunctionAnimation),
    "HitAnimation": (()=>HitAnimation),
    "IdleAnimation": (()=>IdleAnimation),
    "PlayerAnimation": (()=>PlayerAnimation),
    "RunningAnimation": (()=>RunningAnimation),
    "WalkingAnimation": (()=>WalkingAnimation),
    "WaveAnimation": (()=>WaveAnimation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/model.js [app-client] (ecmascript)");
;
class PlayerAnimation {
    constructor(){
        /**
         * The speed of the animation.
         *
         * @defaultValue `1.0`
         */ Object.defineProperty(this, "speed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1.0
        });
        /**
         * Whether the animation is paused.
         *
         * @defaultValue `false`
         */ Object.defineProperty(this, "paused", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * The current progress of the animation.
         */ Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "currentId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "progress0", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "animationObjects", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
    }
    /**
     * Plays the animation, and update the progress.
     *
     * The elapsed time `deltaTime` will be scaled by {@link speed}.
     * If {@link paused} is `true`, this method will do nothing.
     *
     * @param player - the player object
     * @param deltaTime - time elapsed since last call
     */ update(player, deltaTime) {
        if (this.paused) {
            return;
        }
        const delta = deltaTime * this.speed;
        this.animate(player, delta);
        this.animationObjects.forEach((animation, id)=>{
            const progress0 = this.progress0.get(id);
            animation(player, this.progress - progress0, id);
        });
        this.progress += delta;
    }
    /**
     * Adds a new animation based on the original animation and returns its id.
     *
     * @param fn - The animation function to be added, which takes a player object and progress value.When calling addAnimation. progress is 0.
     * @returns The id of the newly added animation.
     *
     * @example
     * Rotate the player while playing the idle animation.
     * ```
     * skinViewer.animation = new skinview3d.IdleAnimation();
     * skinViewer.animation.addAnimation((player, progress)=>player.rotation.y = progress);
     * ```
     */ addAnimation(fn) {
        const id = this.currentId++;
        this.progress0.set(id, this.progress);
        this.animationObjects.set(id, fn);
        return id;
    }
    /**
     * Removes an animation created by the addAnimation method by its id.
     *
     * If the id is undefined, this method will do nothing.
     *
     * @param id - The id of the animation to remove.
     *
     * @example
     * Rotate the player then stop and reset the rotation after 1s.
     * ```
     * var r;
     * r=skinViewer.animation.addAnimation((pl, pr) => {
     * 	pl.rotation.x = pr;
     * });
     * setTimeout(()=>{
     * 	skinViewer.animation.addAnimation((pl, pr,id) => {
     * 		pl.rotation.x=0;
     * 		skinViewer.animation.removeAnimation(id);
     * 	})
     * 	skinViewer.animation.removeAnimation(r);
     * },1000)
     * ```
     */ removeAnimation(id) {
        if (id != undefined) {
            this.animationObjects.delete(id);
            this.progress0.delete(id);
        }
    }
}
class FunctionAnimation extends PlayerAnimation {
    constructor(fn){
        super();
        Object.defineProperty(this, "fn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fn = fn;
    }
    animate(player, delta) {
        this.fn(player, this.progress, delta);
    }
}
class IdleAnimation extends PlayerAnimation {
    animate(player) {
        // Multiply by animation's natural speed
        const t = this.progress * 2;
        // Arm swing
        const basicArmRotationZ = Math.PI * 0.02;
        player.skin.leftArm.rotation.z = Math.cos(t) * 0.03 + basicArmRotationZ;
        player.skin.rightArm.rotation.z = Math.cos(t + Math.PI) * 0.03 - basicArmRotationZ;
        // Always add an angle for cape around the x axis
        const basicCapeRotationX = Math.PI * 0.06;
        player.cape.rotation.x = Math.sin(t) * 0.01 + basicCapeRotationX;
    }
}
class WalkingAnimation extends PlayerAnimation {
    constructor(){
        super(...arguments);
        /**
         * Whether to shake head when walking.
         *
         * @defaultValue `true`
         */ Object.defineProperty(this, "headBobbing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    animate(player) {
        // Multiply by animation's natural speed
        const t = this.progress * 8;
        // Leg swing
        player.skin.leftLeg.rotation.x = Math.sin(t) * 0.5;
        player.skin.rightLeg.rotation.x = Math.sin(t + Math.PI) * 0.5;
        // Arm swing
        player.skin.leftArm.rotation.x = Math.sin(t + Math.PI) * 0.5;
        player.skin.rightArm.rotation.x = Math.sin(t) * 0.5;
        const basicArmRotationZ = Math.PI * 0.02;
        player.skin.leftArm.rotation.z = Math.cos(t) * 0.03 + basicArmRotationZ;
        player.skin.rightArm.rotation.z = Math.cos(t + Math.PI) * 0.03 - basicArmRotationZ;
        if (this.headBobbing) {
            // Head shaking with different frequency & amplitude
            player.skin.head.rotation.y = Math.sin(t / 4) * 0.2;
            player.skin.head.rotation.x = Math.sin(t / 5) * 0.1;
        } else {
            player.skin.head.rotation.y = 0;
            player.skin.head.rotation.x = 0;
        }
        // Always add an angle for cape around the x axis
        const basicCapeRotationX = Math.PI * 0.06;
        player.cape.rotation.x = Math.sin(t / 1.5) * 0.06 + basicCapeRotationX;
    }
}
class RunningAnimation extends PlayerAnimation {
    animate(player) {
        // Multiply by animation's natural speed
        const t = this.progress * 15 + Math.PI * 0.5;
        // Leg swing with larger amplitude
        player.skin.leftLeg.rotation.x = Math.cos(t + Math.PI) * 1.3;
        player.skin.rightLeg.rotation.x = Math.cos(t) * 1.3;
        // Arm swing
        player.skin.leftArm.rotation.x = Math.cos(t) * 1.5;
        player.skin.rightArm.rotation.x = Math.cos(t + Math.PI) * 1.5;
        const basicArmRotationZ = Math.PI * 0.1;
        player.skin.leftArm.rotation.z = Math.cos(t) * 0.1 + basicArmRotationZ;
        player.skin.rightArm.rotation.z = Math.cos(t + Math.PI) * 0.1 - basicArmRotationZ;
        // Jumping
        player.position.y = Math.cos(t * 2);
        // Dodging when running
        player.position.x = Math.cos(t) * 0.15;
        // Slightly tilting when running
        player.rotation.z = Math.cos(t + Math.PI) * 0.01;
        // Apply higher swing frequency, lower amplitude,
        // and greater basic rotation around x axis,
        // to cape when running.
        const basicCapeRotationX = Math.PI * 0.3;
        player.cape.rotation.x = Math.sin(t * 2) * 0.1 + basicCapeRotationX;
    // What about head shaking?
    // You shouldn't glance right and left when running dude :P
    }
}
function clamp(num, min, max) {
    return num <= min ? min : num >= max ? max : num;
}
class FlyingAnimation extends PlayerAnimation {
    animate(player) {
        // Body rotation finishes in 0.5s
        // Elytra expansion finishes in 3.3s
        const t = this.progress > 0 ? this.progress * 20 : 0;
        const startProgress = clamp(t * t / 100, 0, 1);
        player.rotation.x = startProgress * Math.PI / 2;
        player.skin.head.rotation.x = startProgress > 0.5 ? Math.PI / 4 - player.rotation.x : 0;
        const basicArmRotationZ = Math.PI * 0.25 * startProgress;
        player.skin.leftArm.rotation.z = basicArmRotationZ;
        player.skin.rightArm.rotation.z = -basicArmRotationZ;
        const elytraRotationX = 0.34906584;
        const elytraRotationZ = Math.PI / 2;
        const interpolation = Math.pow(0.9, t);
        player.elytra.leftWing.rotation.x = elytraRotationX + interpolation * (0.2617994 - elytraRotationX);
        player.elytra.leftWing.rotation.z = elytraRotationZ + interpolation * (0.2617994 - elytraRotationZ);
        player.elytra.updateRightWing();
    }
}
class WaveAnimation extends PlayerAnimation {
    constructor(whichArm = "left"){
        super();
        Object.defineProperty(this, "whichArm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.whichArm = whichArm;
    }
    animate(player) {
        const t = this.progress * 2 * Math.PI * 0.5;
        const targetArm = this.whichArm === "left" ? player.skin.leftArm : player.skin.rightArm;
        targetArm.rotation.x = 180;
        targetArm.rotation.z = Math.sin(t) * 0.5;
    }
}
class CrouchAnimation extends PlayerAnimation {
    constructor(){
        super(...arguments);
        /**
         * Whether to show the progress of animation.
         * Because there is no progress in the crouch animation in Minecraft, the default value here is false.
         * @defaultValue `false`
         */ Object.defineProperty(this, "showProgress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * Whether to run this animation once.
         *
         * @defaultValue `false`
         */ Object.defineProperty(this, "runOnce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "isRunningHitAnimation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "hitAnimationSpeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "erp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        }); //elytra rotate progress
        Object.defineProperty(this, "isCrouched", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    /**
     * Add the hit animation.
     *
     * @param speed - The speed of hit animation and the default is follow the speed of CrouchAnimation.But if the speed of CrouchAnimation is 0,this animation will not run.
     */ addHitAnimation(speed = this.speed) {
        this.isRunningHitAnimation = true;
        this.hitAnimationSpeed = speed;
    }
    animate(player) {
        let pr = this.progress * 8;
        if (pr === 0) {
            this.isCrouched = undefined;
        }
        if (this.runOnce) {
            pr = clamp(pr, -1, 1);
        }
        if (!this.showProgress) {
            pr = Math.floor(pr);
        }
        player.skin.body.rotation.x = 0.4537860552 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.body.position.z = 1.3256181 * Math.abs(Math.sin(pr * Math.PI / 2)) - 3.4500310377 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.body.position.y = -6 - 2.103677462 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.cape.position.y = 8 - 1.851236166577372 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.cape.rotation.x = 10.8 * Math.PI / 180 + 0.294220265771 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.cape.position.z = -2 + 3.786619432 * Math.abs(Math.sin(pr * Math.PI / 2)) - 3.4500310377 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.elytra.position.x = player.cape.position.x;
        player.elytra.position.y = player.cape.position.y;
        player.elytra.position.z = player.cape.position.z;
        player.elytra.rotation.x = player.cape.rotation.x - 10.8 * Math.PI / 180;
        const pr1 = this.progress / this.speed;
        if (Math.abs(Math.sin(pr * Math.PI / 2)) === 1) {
            this.erp = !this.isCrouched ? pr1 : this.erp;
            this.isCrouched = true;
            player.elytra.leftWing.rotation.z = 0.26179944 + 0.4582006 * Math.abs(Math.sin(Math.min(pr1 - this.erp, 1) * Math.PI / 2));
            player.elytra.updateRightWing();
        } else if (this.isCrouched !== undefined) {
            this.erp = this.isCrouched ? pr1 : this.erp;
            player.elytra.leftWing.rotation.z = 0.72 - 0.4582006 * Math.abs(Math.sin(Math.min(pr1 - this.erp, 1) * Math.PI / 2));
            player.elytra.updateRightWing();
            this.isCrouched = false;
        }
        player.skin.head.position.y = -3.618325234674 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.leftArm.position.z = 3.618325234674 * Math.abs(Math.sin(pr * Math.PI / 2)) - 3.4500310377 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.rightArm.position.z = player.skin.leftArm.position.z;
        player.skin.leftArm.rotation.x = 0.410367746202 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.rightArm.rotation.x = player.skin.leftArm.rotation.x;
        player.skin.leftArm.rotation.z = 0.1;
        player.skin.rightArm.rotation.z = -player.skin.leftArm.rotation.z;
        player.skin.leftArm.position.y = -2 - 2.53943318 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.rightArm.position.y = player.skin.leftArm.position.y;
        player.skin.rightLeg.position.z = -3.4500310377 * Math.abs(Math.sin(pr * Math.PI / 2));
        player.skin.leftLeg.position.z = player.skin.rightLeg.position.z;
        if (this.isRunningHitAnimation) {
            const pr2 = this.progress;
            let t = this.progress * 18 * this.hitAnimationSpeed / this.speed;
            if (this.speed == 0) {
                t = 0;
            }
            const isCrouching = Math.abs(Math.sin(pr2 * Math.PI / 2)) === 1;
            player.skin.rightArm.rotation.x = -0.4537860552 + 2 * Math.sin(t + Math.PI) * 0.3 - (isCrouching ? 0.4537860552 : 0);
            const basicArmRotationZ = 0.01 * Math.PI + 0.06;
            player.skin.rightArm.rotation.z = -Math.cos(t) * 0.403 + basicArmRotationZ;
            player.skin.body.rotation.y = -Math.cos(t) * 0.06;
            player.skin.leftArm.rotation.x = Math.sin(t + Math.PI) * 0.077 + (isCrouching ? 0.47 : 0);
            player.skin.leftArm.rotation.z = -Math.cos(t) * 0.015 + 0.13 - (!isCrouching ? 0.05 : 0);
            if (!isCrouching) {
                player.skin.leftArm.position.z = Math.cos(t) * 0.3;
                player.skin.leftArm.position.x = 5 - Math.cos(t) * 0.05;
            }
        }
    }
}
class HitAnimation extends PlayerAnimation {
    animate(player) {
        const t = this.progress * 18;
        player.skin.rightArm.rotation.x = -0.4537860552 * 2 + 2 * Math.sin(t + Math.PI) * 0.3;
        const basicArmRotationZ = 0.01 * Math.PI + 0.06;
        player.skin.rightArm.rotation.z = -Math.cos(t) * 0.403 + basicArmRotationZ;
        player.skin.body.rotation.y = -Math.cos(t) * 0.06;
        player.skin.leftArm.rotation.x = Math.sin(t + Math.PI) * 0.077;
        player.skin.leftArm.rotation.z = -Math.cos(t) * 0.015 + 0.13 - 0.05;
        player.skin.leftArm.position.z = Math.cos(t) * 0.3;
        player.skin.leftArm.position.x = 5 - Math.cos(t) * 0.05;
    }
} //# sourceMappingURL=animation.js.map
}}),
"[project]/node_modules/skinview3d/libs/nametag.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NameTagObject": (()=>NameTagObject)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/build/three.module.js [app-client] (ecmascript)");
;
class NameTagObject extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Sprite"] {
    constructor(text = "", options = {}){
        const material = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SpriteMaterial"]({
            transparent: true,
            alphaTest: 1e-5
        });
        super(material);
        /**
         * A promise that is resolved after the name tag is fully painted.
         *
         * This will be a resolved promise, if
         * {@link NameTagOptions.repaintAfterLoaded} is `false`, or
         * the desired font is available when the `NameTagObject` is created.
         *
         * If {@link NameTagOptions.repaintAfterLoaded} is `true`, and
         * the desired font hasn't been loaded when the `NameTagObject` is created,
         * the name tag will be painted with the fallback font first, and then
         * repainted with the desired font after it's loaded. This promise is
         * resolved after repainting is done.
         */ Object.defineProperty(this, "painted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "font", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "margin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "backgroundStyle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "textMaterial", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.textMaterial = material;
        this.text = text;
        this.font = options.font === undefined ? "48px Minecraft" : options.font;
        this.margin = options.margin === undefined ? [
            5,
            10,
            5,
            10
        ] : options.margin;
        this.textStyle = options.textStyle === undefined ? "white" : options.textStyle;
        this.backgroundStyle = options.backgroundStyle === undefined ? "rgba(0,0,0,.25)" : options.backgroundStyle;
        this.height = options.height === undefined ? 4.0 : options.height;
        const repaintAfterLoaded = options.repaintAfterLoaded === undefined ? true : options.repaintAfterLoaded;
        if (repaintAfterLoaded && !document.fonts.check(this.font, this.text)) {
            this.paint();
            this.painted = this.loadAndPaint();
        } else {
            this.paint();
            this.painted = Promise.resolve();
        }
    }
    async loadAndPaint() {
        await document.fonts.load(this.font, this.text);
        this.paint();
    }
    paint() {
        const canvas = document.createElement("canvas");
        // Measure the text size
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        let ctx = canvas.getContext("2d");
        ctx.font = this.font;
        const metrics = ctx.measureText(this.text);
        // Compute canvas size
        canvas.width = this.margin[3] + metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight + this.margin[1];
        canvas.height = this.margin[0] + metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent + this.margin[2];
        // After change canvas size, the context needs to be re-created
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        ctx = canvas.getContext("2d");
        ctx.font = this.font;
        // Fill background
        ctx.fillStyle = this.backgroundStyle;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        // Draw text
        ctx.fillStyle = this.textStyle;
        ctx.fillText(this.text, this.margin[3] + metrics.actualBoundingBoxLeft, this.margin[0] + metrics.actualBoundingBoxAscent);
        // Apply texture
        const texture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CanvasTexture"](canvas);
        texture.magFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        texture.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.textMaterial.map = texture;
        this.textMaterial.needsUpdate = true;
        // Update size
        this.scale.x = canvas.width / canvas.height * this.height;
        this.scale.y = this.height;
    }
} //# sourceMappingURL=nametag.js.map
}}),
"[project]/node_modules/skinview3d/libs/viewer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SkinViewer": (()=>SkinViewer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/load-image.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/build/three.module.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$controls$2f$OrbitControls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/examples/jsm/controls/OrbitControls.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$postprocessing$2f$EffectComposer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/examples/jsm/postprocessing/EffectComposer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$postprocessing$2f$RenderPass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/examples/jsm/postprocessing/RenderPass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$postprocessing$2f$ShaderPass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/examples/jsm/postprocessing/ShaderPass.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$shaders$2f$FXAAShader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/three/examples/jsm/shaders/FXAAShader.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/animation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$nametag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/nametag.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
class SkinViewer {
    constructor(options = {}){
        /**
         * The canvas where the renderer draws its output.
         */ Object.defineProperty(this, "canvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "scene", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "camera", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "renderer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The OrbitControls component which is used to implement the mouse control function.
         *
         * @see {@link https://threejs.org/docs/#examples/en/controls/OrbitControls | OrbitControls - three.js docs}
         */ Object.defineProperty(this, "controls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The player object.
         */ Object.defineProperty(this, "playerObject", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A group that wraps the player object.
         * It is used to center the player in the world.
         */ Object.defineProperty(this, "playerWrapper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "globalLight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AmbientLight"](0xffffff, 3)
        });
        Object.defineProperty(this, "cameraLight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PointLight"](0xffffff, 0.6)
        });
        Object.defineProperty(this, "composer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "renderPass", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fxaaPass", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "skinCanvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "capeCanvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "earsCanvas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "skinTexture", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "capeTexture", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "earsTexture", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "backgroundTexture", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "_disposed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_renderPaused", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_zoom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isUserRotating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * Whether to rotate the player along the y axis.
         *
         * @defaultValue `false`
         */ Object.defineProperty(this, "autoRotate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * The angular velocity of the player, in rad/s.
         *
         * @defaultValue `1.0`
         * @see {@link autoRotate}
         */ Object.defineProperty(this, "autoRotateSpeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1.0
        });
        Object.defineProperty(this, "_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "clock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "animationID", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onContextLost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onContextRestored", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pixelRatio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "devicePixelRatioQuery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onDevicePixelRatioChange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_nameTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        this.canvas = options.canvas === undefined ? document.createElement("canvas") : options.canvas;
        this.skinCanvas = document.createElement("canvas");
        this.capeCanvas = document.createElement("canvas");
        this.earsCanvas = document.createElement("canvas");
        this.scene = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Scene"]();
        this.camera = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PerspectiveCamera"]();
        this.camera.add(this.cameraLight);
        this.scene.add(this.camera);
        this.scene.add(this.globalLight);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ColorManagement"].enabled = false;
        this.renderer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WebGLRenderer"]({
            canvas: this.canvas,
            preserveDrawingBuffer: options.preserveDrawingBuffer === true
        });
        this.onDevicePixelRatioChange = ()=>{
            this.renderer.setPixelRatio(window.devicePixelRatio);
            this.updateComposerSize();
            if (this._pixelRatio === "match-device") {
                this.devicePixelRatioQuery = matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
                this.devicePixelRatioQuery.addEventListener("change", this.onDevicePixelRatioChange, {
                    once: true
                });
            }
        };
        if (options.pixelRatio === undefined || options.pixelRatio === "match-device") {
            this._pixelRatio = "match-device";
            this.devicePixelRatioQuery = matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
            this.devicePixelRatioQuery.addEventListener("change", this.onDevicePixelRatioChange, {
                once: true
            });
            this.renderer.setPixelRatio(window.devicePixelRatio);
        } else {
            this._pixelRatio = options.pixelRatio;
            this.devicePixelRatioQuery = null;
            this.renderer.setPixelRatio(options.pixelRatio);
        }
        this.renderer.setClearColor(0, 0);
        let renderTarget;
        if (this.renderer.capabilities.isWebGL2) {
            // Use float precision depth if possible
            // see https://github.com/bs-community/skinview3d/issues/111
            renderTarget = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WebGLRenderTarget"](0, 0, {
                depthTexture: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DepthTexture"](0, 0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FloatType"])
            });
        }
        this.composer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$postprocessing$2f$EffectComposer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EffectComposer"](this.renderer, renderTarget);
        this.renderPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$postprocessing$2f$RenderPass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RenderPass"](this.scene, this.camera);
        this.fxaaPass = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$postprocessing$2f$ShaderPass$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ShaderPass"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$shaders$2f$FXAAShader$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FXAAShader"]);
        this.composer.addPass(this.renderPass);
        this.composer.addPass(this.fxaaPass);
        this.playerObject = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PlayerObject"]();
        this.playerObject.name = "player";
        this.playerObject.skin.visible = false;
        this.playerObject.cape.visible = false;
        this.playerWrapper = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Group"]();
        this.playerWrapper.add(this.playerObject);
        this.scene.add(this.playerWrapper);
        this.controls = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$examples$2f$jsm$2f$controls$2f$OrbitControls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OrbitControls"](this.camera, this.canvas);
        this.controls.enablePan = false; // disable pan by default
        this.controls.minDistance = 10;
        this.controls.maxDistance = 256;
        if (options.enableControls === false) {
            this.controls.enabled = false;
        }
        if (options.skin !== undefined) {
            this.loadSkin(options.skin, {
                model: options.model,
                ears: options.ears === "current-skin"
            });
        }
        if (options.cape !== undefined) {
            this.loadCape(options.cape);
        }
        if (options.ears !== undefined && options.ears !== "current-skin") {
            this.loadEars(options.ears.source, {
                textureType: options.ears.textureType
            });
        }
        if (options.width !== undefined) {
            this.width = options.width;
        }
        if (options.height !== undefined) {
            this.height = options.height;
        }
        if (options.background !== undefined) {
            this.background = options.background;
        }
        if (options.panorama !== undefined) {
            this.loadPanorama(options.panorama);
        }
        if (options.nameTag !== undefined) {
            this.nameTag = options.nameTag;
        }
        this.camera.position.z = 1;
        this._zoom = options.zoom === undefined ? 0.9 : options.zoom;
        this.fov = options.fov === undefined ? 50 : options.fov;
        this._animation = options.animation === undefined ? null : options.animation;
        this.clock = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Clock"]();
        if (options.renderPaused === true) {
            this._renderPaused = true;
            this.animationID = null;
        } else {
            this.animationID = window.requestAnimationFrame(()=>this.draw());
        }
        this.onContextLost = (event)=>{
            event.preventDefault();
            if (this.animationID !== null) {
                window.cancelAnimationFrame(this.animationID);
                this.animationID = null;
            }
        };
        this.onContextRestored = ()=>{
            this.renderer.setClearColor(0, 0); // Clear color might be lost
            if (!this._renderPaused && !this._disposed && this.animationID === null) {
                this.animationID = window.requestAnimationFrame(()=>this.draw());
            }
        };
        this.canvas.addEventListener("webglcontextlost", this.onContextLost, false);
        this.canvas.addEventListener("webglcontextrestored", this.onContextRestored, false);
        this.canvas.addEventListener("mousedown", ()=>{
            this.isUserRotating = true;
        }, false);
        this.canvas.addEventListener("mouseup", ()=>{
            this.isUserRotating = false;
        }, false);
        this.canvas.addEventListener("touchmove", (e)=>{
            if (e.touches.length === 1) {
                this.isUserRotating = true;
            } else {
                this.isUserRotating = false;
            }
        }, false);
        this.canvas.addEventListener("touchend", ()=>{
            this.isUserRotating = false;
        }, false);
    }
    updateComposerSize() {
        this.composer.setSize(this.width, this.height);
        const pixelRatio = this.renderer.getPixelRatio();
        this.composer.setPixelRatio(pixelRatio);
        this.fxaaPass.material.uniforms["resolution"].value.x = 1 / (this.width * pixelRatio);
        this.fxaaPass.material.uniforms["resolution"].value.y = 1 / (this.height * pixelRatio);
    }
    recreateSkinTexture() {
        if (this.skinTexture !== null) {
            this.skinTexture.dispose();
        }
        this.skinTexture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CanvasTexture"](this.skinCanvas);
        this.skinTexture.magFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.skinTexture.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.playerObject.skin.map = this.skinTexture;
    }
    recreateCapeTexture() {
        if (this.capeTexture !== null) {
            this.capeTexture.dispose();
        }
        this.capeTexture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CanvasTexture"](this.capeCanvas);
        this.capeTexture.magFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.capeTexture.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.playerObject.cape.map = this.capeTexture;
        this.playerObject.elytra.map = this.capeTexture;
    }
    recreateEarsTexture() {
        if (this.earsTexture !== null) {
            this.earsTexture.dispose();
        }
        this.earsTexture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CanvasTexture"](this.earsCanvas);
        this.earsTexture.magFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.earsTexture.minFilter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NearestFilter"];
        this.playerObject.ears.map = this.earsTexture;
    }
    loadSkin(source, options = {}) {
        if (source === null) {
            this.resetSkin();
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTextureSource"])(source)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadSkinToCanvas"])(this.skinCanvas, source);
            this.recreateSkinTexture();
            if (options.model === undefined || options.model === "auto-detect") {
                this.playerObject.skin.modelType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["inferModelType"])(this.skinCanvas);
            } else {
                this.playerObject.skin.modelType = options.model;
            }
            if (options.makeVisible !== false) {
                this.playerObject.skin.visible = true;
            }
            if (options.ears === true || options.ears == "load-only") {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadEarsToCanvasFromSkin"])(this.earsCanvas, source);
                this.recreateEarsTexture();
                if (options.ears === true) {
                    this.playerObject.ears.visible = true;
                }
            }
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadImage"])(source).then((image)=>this.loadSkin(image, options));
        }
    }
    resetSkin() {
        this.playerObject.skin.visible = false;
        this.playerObject.skin.map = null;
        if (this.skinTexture !== null) {
            this.skinTexture.dispose();
            this.skinTexture = null;
        }
    }
    loadCape(source, options = {}) {
        if (source === null) {
            this.resetCape();
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTextureSource"])(source)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadCapeToCanvas"])(this.capeCanvas, source);
            this.recreateCapeTexture();
            if (options.makeVisible !== false) {
                this.playerObject.backEquipment = options.backEquipment === undefined ? "cape" : options.backEquipment;
            }
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadImage"])(source).then((image)=>this.loadCape(image, options));
        }
    }
    resetCape() {
        this.playerObject.backEquipment = null;
        this.playerObject.cape.map = null;
        this.playerObject.elytra.map = null;
        if (this.capeTexture !== null) {
            this.capeTexture.dispose();
            this.capeTexture = null;
        }
    }
    loadEars(source, options = {}) {
        if (source === null) {
            this.resetEars();
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTextureSource"])(source)) {
            if (options.textureType === "skin") {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadEarsToCanvasFromSkin"])(this.earsCanvas, source);
            } else {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadEarsToCanvas"])(this.earsCanvas, source);
            }
            this.recreateEarsTexture();
            if (options.makeVisible !== false) {
                this.playerObject.ears.visible = true;
            }
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadImage"])(source).then((image)=>this.loadEars(image, options));
        }
    }
    resetEars() {
        this.playerObject.ears.visible = false;
        this.playerObject.ears.map = null;
        if (this.earsTexture !== null) {
            this.earsTexture.dispose();
            this.earsTexture = null;
        }
    }
    loadPanorama(source) {
        return this.loadBackground(source, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EquirectangularReflectionMapping"]);
    }
    loadBackground(source, mapping) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTextureSource"])(source)) {
            if (this.backgroundTexture !== null) {
                this.backgroundTexture.dispose();
            }
            this.backgroundTexture = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Texture"]();
            this.backgroundTexture.image = source;
            if (mapping !== undefined) {
                this.backgroundTexture.mapping = mapping;
            }
            this.backgroundTexture.needsUpdate = true;
            this.scene.background = this.backgroundTexture;
        } else {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["loadImage"])(source).then((image)=>this.loadBackground(image, mapping));
        }
    }
    draw() {
        const dt = this.clock.getDelta();
        if (this._animation !== null) {
            this._animation.update(this.playerObject, dt);
        }
        if (this.autoRotate) {
            if (!(this.controls.enableRotate && this.isUserRotating)) {
                this.playerWrapper.rotation.y += dt * this.autoRotateSpeed;
            }
        }
        this.controls.update();
        this.render();
        this.animationID = window.requestAnimationFrame(()=>this.draw());
    }
    /**
     * Renders the scene to the canvas.
     * This method does not change the animation progress.
     */ render() {
        this.composer.render();
    }
    setSize(width, height) {
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
        this.updateComposerSize();
    }
    dispose() {
        this._disposed = true;
        this.canvas.removeEventListener("webglcontextlost", this.onContextLost, false);
        this.canvas.removeEventListener("webglcontextrestored", this.onContextRestored, false);
        if (this.devicePixelRatioQuery !== null) {
            this.devicePixelRatioQuery.removeEventListener("change", this.onDevicePixelRatioChange);
            this.devicePixelRatioQuery = null;
        }
        if (this.animationID !== null) {
            window.cancelAnimationFrame(this.animationID);
            this.animationID = null;
        }
        this.controls.dispose();
        this.renderer.dispose();
        this.resetSkin();
        this.resetCape();
        this.resetEars();
        this.background = null;
        this.fxaaPass.fsQuad.dispose();
    }
    get disposed() {
        return this._disposed;
    }
    /**
     * Whether rendering and animations are paused.
     * Setting this property to true will stop both rendering and animation loops.
     * Setting it back to false will resume them.
     */ get renderPaused() {
        return this._renderPaused;
    }
    set renderPaused(value) {
        this._renderPaused = value;
        if (this._renderPaused && this.animationID !== null) {
            window.cancelAnimationFrame(this.animationID);
            this.animationID = null;
            this.clock.stop();
            this.clock.autoStart = true;
        } else if (!this._renderPaused && !this._disposed && !this.renderer.getContext().isContextLost() && this.animationID == null) {
            this.animationID = window.requestAnimationFrame(()=>this.draw());
        }
    }
    get width() {
        return this.renderer.getSize(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Vector2"]()).width;
    }
    set width(newWidth) {
        this.setSize(newWidth, this.height);
    }
    get height() {
        return this.renderer.getSize(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Vector2"]()).height;
    }
    set height(newHeight) {
        this.setSize(this.width, newHeight);
    }
    get background() {
        return this.scene.background;
    }
    set background(value) {
        if (value === null || value instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Color"] || value instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Texture"]) {
            this.scene.background = value;
        } else {
            this.scene.background = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Color"](value);
        }
        if (this.backgroundTexture !== null && value !== this.backgroundTexture) {
            this.backgroundTexture.dispose();
            this.backgroundTexture = null;
        }
    }
    adjustCameraDistance() {
        let distance = 4.5 + 16.5 / Math.tan(this.fov / 180 * Math.PI / 2) / this.zoom;
        // limit distance between 10 ~ 256 (default min / max distance of OrbitControls)
        if (distance < 10) {
            distance = 10;
        } else if (distance > 256) {
            distance = 256;
        }
        this.camera.position.multiplyScalar(distance / this.camera.position.length());
        this.camera.updateProjectionMatrix();
    }
    resetCameraPose() {
        this.camera.position.set(0, 0, 1);
        this.camera.rotation.set(0, 0, 0);
        this.adjustCameraDistance();
    }
    get fov() {
        return this.camera.fov;
    }
    set fov(value) {
        this.camera.fov = value;
        this.adjustCameraDistance();
    }
    get zoom() {
        return this._zoom;
    }
    set zoom(value) {
        this._zoom = value;
        this.adjustCameraDistance();
    }
    get pixelRatio() {
        return this._pixelRatio;
    }
    set pixelRatio(newValue) {
        if (newValue === "match-device") {
            if (this._pixelRatio !== "match-device") {
                this._pixelRatio = newValue;
                this.onDevicePixelRatioChange();
            }
        } else {
            if (this._pixelRatio === "match-device" && this.devicePixelRatioQuery !== null) {
                this.devicePixelRatioQuery.removeEventListener("change", this.onDevicePixelRatioChange);
                this.devicePixelRatioQuery = null;
            }
            this._pixelRatio = newValue;
            this.renderer.setPixelRatio(newValue);
            this.updateComposerSize();
        }
    }
    /**
     * The animation that is current playing, or `null` if no animation is playing.
     *
     * Setting this property to a different value will change the current animation.
     * The player's pose and the progress of the new animation will be reset before playing.
     *
     * Setting this property to `null` will stop the current animation and reset the player's pose.
     */ get animation() {
        return this._animation;
    }
    set animation(animation) {
        if (this._animation !== animation) {
            this.playerObject.resetJoints();
            this.playerObject.position.set(0, 0, 0);
            this.playerObject.rotation.set(0, 0, 0);
            this.clock.stop();
            this.clock.autoStart = true;
        }
        if (animation !== null) {
            animation.progress = 0;
        }
        this._animation = animation;
    }
    /**
     * The name tag to display above the player, or `null` if there is none.
     *
     * When setting this property to a `string` value, a {@link NameTagObject}
     * will be automatically created with default options.
     *
     * @example
     * ```
     * skinViewer.nameTag = "hello";
     * skinViewer.nameTag = new NameTagObject("hello", { textStyle: "yellow" });
     * skinViewer.nameTag = null;
     * ```
     */ get nameTag() {
        return this._nameTag;
    }
    set nameTag(newVal) {
        if (this._nameTag !== null) {
            // Remove the old name tag from the scene
            this.playerWrapper.remove(this._nameTag);
        }
        if (newVal !== null) {
            if (!(newVal instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$three$2f$build$2f$three$2e$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Object3D"])) {
                newVal = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$nametag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NameTagObject"](newVal);
            }
            // Add the new name tag to the scene
            this.playerWrapper.add(newVal);
            // Set y position
            newVal.position.y = 20;
        }
        this._nameTag = newVal;
    }
} //# sourceMappingURL=viewer.js.map
}}),
"[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$viewer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/viewer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/animation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$nametag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/nametag.js [app-client] (ecmascript)"); //# sourceMappingURL=skinview3d.js.map
;
;
;
;
}}),
"[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$viewer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/viewer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/animation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$nametag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/nametag.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BodyPart": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BodyPart"]),
    "CapeObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CapeObject"]),
    "CrouchAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CrouchAnimation"]),
    "EarsObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EarsObject"]),
    "ElytraObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ElytraObject"]),
    "FlyingAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FlyingAnimation"]),
    "FunctionAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FunctionAnimation"]),
    "HitAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HitAnimation"]),
    "IdleAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IdleAnimation"]),
    "NameTagObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$nametag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NameTagObject"]),
    "PlayerAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PlayerAnimation"]),
    "PlayerObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PlayerObject"]),
    "RunningAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RunningAnimation"]),
    "SkinObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SkinObject"]),
    "SkinViewer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$viewer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SkinViewer"]),
    "WalkingAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WalkingAnimation"]),
    "WaveAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WaveAnimation"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$viewer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/viewer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$animation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/animation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$nametag$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/nametag.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BodyPart": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BodyPart"]),
    "CapeObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CapeObject"]),
    "CrouchAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CrouchAnimation"]),
    "EarsObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["EarsObject"]),
    "ElytraObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ElytraObject"]),
    "FlyingAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["FlyingAnimation"]),
    "FunctionAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["FunctionAnimation"]),
    "HitAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["HitAnimation"]),
    "IdleAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IdleAnimation"]),
    "NameTagObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["NameTagObject"]),
    "PlayerAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["PlayerAnimation"]),
    "PlayerObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["PlayerObject"]),
    "RunningAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["RunningAnimation"]),
    "SkinObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SkinObject"]),
    "SkinViewer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SkinViewer"]),
    "WalkingAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["WalkingAnimation"]),
    "WaveAnimation": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["WaveAnimation"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview3d$2f$libs$2f$skinview3d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/skinview3d/libs/skinview3d.js [app-client] (ecmascript) <exports>");
}}),
"[project]/node_modules/skinview-utils/build/types.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isTextureSource": (()=>isTextureSource)
});
function isTextureSource(value) {
    return value instanceof HTMLImageElement || value instanceof HTMLVideoElement || value instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && value instanceof ImageBitmap || typeof OffscreenCanvas !== "undefined" && value instanceof OffscreenCanvas;
} //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/skinview-utils/build/process.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "inferModelType": (()=>inferModelType),
    "loadCapeToCanvas": (()=>loadCapeToCanvas),
    "loadEarsToCanvas": (()=>loadEarsToCanvas),
    "loadEarsToCanvasFromSkin": (()=>loadEarsToCanvasFromSkin),
    "loadSkinToCanvas": (()=>loadSkinToCanvas)
});
function hasTransparency(context, x0, y0, w, h) {
    const imgData = context.getImageData(x0, y0, w, h);
    for(let x = 0; x < w; x++){
        for(let y = 0; y < h; y++){
            const offset = (x + y * w) * 4;
            if (imgData.data[offset + 3] !== 0xff) {
                return true;
            }
        }
    }
    return false;
}
function computeSkinScale(width) {
    return width / 64.0;
}
function fixOpaqueSkin(context, width, format1_8) {
    // see https://github.com/bs-community/skinview3d/issues/15
    // see https://github.com/bs-community/skinview3d/issues/93
    // check whether the skin has opaque background
    if (format1_8) {
        if (hasTransparency(context, 0, 0, width, width)) return;
    } else {
        if (hasTransparency(context, 0, 0, width, width / 2)) return;
    }
    const scale = computeSkinScale(width);
    const clearArea = (x, y, w, h)=>context.clearRect(x * scale, y * scale, w * scale, h * scale);
    clearArea(40, 0, 8, 8); // Helm Top
    clearArea(48, 0, 8, 8); // Helm Bottom
    clearArea(32, 8, 8, 8); // Helm Right
    clearArea(40, 8, 8, 8); // Helm Front
    clearArea(48, 8, 8, 8); // Helm Left
    clearArea(56, 8, 8, 8); // Helm Back
    if (format1_8) {
        clearArea(4, 32, 4, 4); // Right Leg Layer 2 Top
        clearArea(8, 32, 4, 4); // Right Leg Layer 2 Bottom
        clearArea(0, 36, 4, 12); // Right Leg Layer 2 Right
        clearArea(4, 36, 4, 12); // Right Leg Layer 2 Front
        clearArea(8, 36, 4, 12); // Right Leg Layer 2 Left
        clearArea(12, 36, 4, 12); // Right Leg Layer 2 Back
        clearArea(20, 32, 8, 4); // Torso Layer 2 Top
        clearArea(28, 32, 8, 4); // Torso Layer 2 Bottom
        clearArea(16, 36, 4, 12); // Torso Layer 2 Right
        clearArea(20, 36, 8, 12); // Torso Layer 2 Front
        clearArea(28, 36, 4, 12); // Torso Layer 2 Left
        clearArea(32, 36, 8, 12); // Torso Layer 2 Back
        clearArea(44, 32, 4, 4); // Right Arm Layer 2 Top
        clearArea(48, 32, 4, 4); // Right Arm Layer 2 Bottom
        clearArea(40, 36, 4, 12); // Right Arm Layer 2 Right
        clearArea(44, 36, 4, 12); // Right Arm Layer 2 Front
        clearArea(48, 36, 4, 12); // Right Arm Layer 2 Left
        clearArea(52, 36, 12, 12); // Right Arm Layer 2 Back
        clearArea(4, 48, 4, 4); // Left Leg Layer 2 Top
        clearArea(8, 48, 4, 4); // Left Leg Layer 2 Bottom
        clearArea(0, 52, 4, 12); // Left Leg Layer 2 Right
        clearArea(4, 52, 4, 12); // Left Leg Layer 2 Front
        clearArea(8, 52, 4, 12); // Left Leg Layer 2 Left
        clearArea(12, 52, 4, 12); // Left Leg Layer 2 Back
        clearArea(52, 48, 4, 4); // Left Arm Layer 2 Top
        clearArea(56, 48, 4, 4); // Left Arm Layer 2 Bottom
        clearArea(48, 52, 4, 12); // Left Arm Layer 2 Right
        clearArea(52, 52, 4, 12); // Left Arm Layer 2 Front
        clearArea(56, 52, 4, 12); // Left Arm Layer 2 Left
        clearArea(60, 52, 4, 12); // Left Arm Layer 2 Back
    }
}
function convertSkinTo1_8(context, width) {
    // Copied parts are horizontally flipped
    context.save();
    context.scale(-1, 1);
    const scale = computeSkinScale(width);
    const copySkin = (sX, sY, w, h, dX, dY)=>context.drawImage(context.canvas, sX * scale, sY * scale, w * scale, h * scale, -dX * scale, dY * scale, -w * scale, h * scale);
    copySkin(4, 16, 4, 4, 20, 48); // Top Leg
    copySkin(8, 16, 4, 4, 24, 48); // Bottom Leg
    copySkin(0, 20, 4, 12, 24, 52); // Outer Leg
    copySkin(4, 20, 4, 12, 20, 52); // Front Leg
    copySkin(8, 20, 4, 12, 16, 52); // Inner Leg
    copySkin(12, 20, 4, 12, 28, 52); // Back Leg
    copySkin(44, 16, 4, 4, 36, 48); // Top Arm
    copySkin(48, 16, 4, 4, 40, 48); // Bottom Arm
    copySkin(40, 20, 4, 12, 40, 52); // Outer Arm
    copySkin(44, 20, 4, 12, 36, 52); // Front Arm
    copySkin(48, 20, 4, 12, 32, 52); // Inner Arm
    copySkin(52, 20, 4, 12, 44, 52); // Back Arm
    context.restore();
}
function loadSkinToCanvas(canvas, image) {
    let isOldFormat = false;
    if (image.width !== image.height) {
        if (image.width === 2 * image.height) {
            isOldFormat = true;
        } else {
            throw new Error(`Bad skin size: ${image.width}x${image.height}`);
        }
    }
    const context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    if (isOldFormat) {
        const sideLength = image.width;
        canvas.width = sideLength;
        canvas.height = sideLength;
        context.clearRect(0, 0, sideLength, sideLength);
        context.drawImage(image, 0, 0, sideLength, sideLength / 2.0);
        convertSkinTo1_8(context, sideLength);
        fixOpaqueSkin(context, canvas.width, false);
    } else {
        canvas.width = image.width;
        canvas.height = image.height;
        context.clearRect(0, 0, image.width, image.height);
        context.drawImage(image, 0, 0, canvas.width, canvas.height);
        fixOpaqueSkin(context, canvas.width, true);
    }
}
function computeCapeScale(image) {
    if (image.width === 2 * image.height) {
        // 64x32
        return image.width / 64;
    } else if (image.width * 17 === image.height * 22) {
        // 22x17
        return image.width / 22;
    } else if (image.width * 11 === image.height * 23) {
        // 46x22
        return image.width / 46;
    } else {
        throw new Error(`Bad cape size: ${image.width}x${image.height}`);
    }
}
function loadCapeToCanvas(canvas, image) {
    const scale = computeCapeScale(image);
    canvas.width = 64 * scale;
    canvas.height = 32 * scale;
    const context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.drawImage(image, 0, 0, image.width, image.height);
}
function isAreaBlack(context, x0, y0, w, h) {
    const imgData = context.getImageData(x0, y0, w, h);
    for(let x = 0; x < w; x++){
        for(let y = 0; y < h; y++){
            const offset = (x + y * w) * 4;
            if (!(imgData.data[offset + 0] === 0 && imgData.data[offset + 1] === 0 && imgData.data[offset + 2] === 0 && imgData.data[offset + 3] === 0xff)) {
                return false;
            }
        }
    }
    return true;
}
function isAreaWhite(context, x0, y0, w, h) {
    const imgData = context.getImageData(x0, y0, w, h);
    for(let x = 0; x < w; x++){
        for(let y = 0; y < h; y++){
            const offset = (x + y * w) * 4;
            if (!(imgData.data[offset + 0] === 0xff && imgData.data[offset + 1] === 0xff && imgData.data[offset + 2] === 0xff && imgData.data[offset + 3] === 0xff)) {
                return false;
            }
        }
    }
    return true;
}
function inferModelType(canvas) {
    // The right arm area of *default* skins:
    // (44,16)->*-------*-------*
    // (40,20)  |top    |bottom |
    // \|/      |4x4    |4x4    |
    //  *-------*-------*-------*-------*
    //  |right  |front  |left   |back   |
    //  |4x12   |4x12   |4x12   |4x12   |
    //  *-------*-------*-------*-------*
    // The right arm area of *slim* skins:
    // (44,16)->*------*------*-*
    // (40,20)  |top   |bottom| |<----[x0=50,y0=16,w=2,h=4]
    // \|/      |3x4   |3x4   | |
    //  *-------*------*------***-----*-*
    //  |right  |front |left   |back  | |<----[x0=54,y0=20,w=2,h=12]
    //  |4x12   |3x12  |4x12   |3x12  | |
    //  *-------*------*-------*------*-*
    // Compared with default right arms, slim right arms have 2 unused areas.
    //
    // The same is true for left arm:
    // The left arm area of *default* skins:
    // (36,48)->*-------*-------*
    // (32,52)  |top    |bottom |
    // \|/      |4x4    |4x4    |
    //  *-------*-------*-------*-------*
    //  |right  |front  |left   |back   |
    //  |4x12   |4x12   |4x12   |4x12   |
    //  *-------*-------*-------*-------*
    // The left arm area of *slim* skins:
    // (36,48)->*------*------*-*
    // (32,52)  |top   |bottom| |<----[x0=42,y0=48,w=2,h=4]
    // \|/      |3x4   |3x4   | |
    //  *-------*------*------***-----*-*
    //  |right  |front |left   |back  | |<----[x0=46,y0=52,w=2,h=12]
    //  |4x12   |3x12  |4x12   |3x12  | |
    //  *-------*------*-------*------*-*
    //
    // If there is a transparent pixel in any of the 4 unused areas, the skin must be slim,
    // as transparent pixels are not allowed in the first layer.
    // If the 4 areas are all black or all white, the skin is also considered as slim.
    const scale = computeSkinScale(canvas.width);
    const context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    const checkTransparency = (x, y, w, h)=>hasTransparency(context, x * scale, y * scale, w * scale, h * scale);
    const checkBlack = (x, y, w, h)=>isAreaBlack(context, x * scale, y * scale, w * scale, h * scale);
    const checkWhite = (x, y, w, h)=>isAreaWhite(context, x * scale, y * scale, w * scale, h * scale);
    const isSlim = checkTransparency(50, 16, 2, 4) || checkTransparency(54, 20, 2, 12) || checkTransparency(42, 48, 2, 4) || checkTransparency(46, 52, 2, 12) || checkBlack(50, 16, 2, 4) && checkBlack(54, 20, 2, 12) && checkBlack(42, 48, 2, 4) && checkBlack(46, 52, 2, 12) || checkWhite(50, 16, 2, 4) && checkWhite(54, 20, 2, 12) && checkWhite(42, 48, 2, 4) && checkWhite(46, 52, 2, 12);
    return isSlim ? "slim" : "default";
}
function computeEarsScale(image) {
    if (image.width === image.height * 2 && image.height % 7 === 0) {
        return image.height / 7;
    } else {
        throw new Error(`Bad ears size: ${image.width}x${image.height}`);
    }
}
function loadEarsToCanvas(canvas, image) {
    const scale = computeEarsScale(image);
    canvas.width = 14 * scale;
    canvas.height = 7 * scale;
    const context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.drawImage(image, 0, 0, image.width, image.height);
}
function loadEarsToCanvasFromSkin(canvas, image) {
    if (image.width !== image.height && image.width !== 2 * image.height) {
        throw new Error(`Bad skin size: ${image.width}x${image.height}`);
    }
    const scale = computeSkinScale(image.width);
    const w = 14 * scale;
    const h = 7 * scale;
    canvas.width = w;
    canvas.height = h;
    const context = canvas.getContext("2d", {
        willReadFrequently: true
    });
    context.clearRect(0, 0, w, h);
    context.drawImage(image, 24 * scale, 0, w, h, 0, 0, w, h);
} //# sourceMappingURL=process.js.map
}}),
"[project]/node_modules/skinview-utils/build/load-image.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadImage": (()=>loadImage)
});
async function loadImage(source) {
    const image = document.createElement("img");
    return new Promise((resolve, reject)=>{
        image.onload = ()=>resolve(image);
        image.onerror = reject;
        image.crossOrigin = "anonymous";
        if (typeof source === "string") {
            image.src = source;
        } else {
            if (source.crossOrigin !== undefined) {
                image.crossOrigin = source.crossOrigin;
            }
            if (source.referrerPolicy !== undefined) {
                image.referrerPolicy = source.referrerPolicy;
            }
            image.src = source.src;
        }
    });
} //# sourceMappingURL=load-image.js.map
}}),
"[project]/node_modules/skinview-utils/build/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/load-image.js [app-client] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
}}),
"[project]/node_modules/skinview-utils/build/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/types.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$load$2d$image$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/load-image.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$skinview$2d$utils$2f$build$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/skinview-utils/build/index.js [app-client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_f8b9b333._.js.map